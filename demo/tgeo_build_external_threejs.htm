<!DOCTYPE html>
<html lang="en">
   <head>
      <!-- as prototype used: https://github.com/mrdoob/three.js/blob/master/examples/webgl_geometries.html -->
      <title>Build and draw TGeo object using external three.js</title>
      <meta charset="utf-8">
      <link rel="shortcut icon" href="../img/RootIcon.ico"/>
      <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
      <style>
         body {
            font-family: Monospace;
            background-color: #000;
            margin: 0px;
            overflow: hidden;
         }
      </style>
      <script type="importmap">
         {
            "imports": {
               "three": "https://threejs.org/build/three.module.js",
               "three/addons": "https://threejs.org/examples/jsm/Addons.js",
               "three_stats": "https://threejs.org/examples/jsm/libs/stats.module.js",
               "jsroot_geom": "../build/geom_nothreejs.mjs"
            }
         }
      </script>

   </head>

   <body>
   </body>

   <script type='module'>

      import { Box3, Vector3, PerspectiveCamera, Scene, AmbientLight, DirectionalLight, DoubleSide,
               MeshLambertMaterial, Mesh, TetrahedronGeometry, WebGLRenderer } from 'three';

      import Stats from 'three_stats';

      import { openFile, build, produceRenderOrder } from 'jsroot_geom';


      let container, stats,  camera, scene, renderer, geom_size = 400, dummy = null;

      function add_geometry(obj) {

         // options for building three.js model
         let opt = { numfaces: 100000, numnodes: 1000 };

         // increase number of faces
         // opt.numfaces *= 100;
         // opt.numnodes *= 100;

         // use default colors
         // opt.dflt_colors = true;

         // enable usage of InstancedMesh
         opt.instancing = 1;

         // function demonstrate creation of three.js model
         let obj3d = build(obj, opt);

         if (!obj3d) return;
         scene.remove( dummy );
         scene.add( obj3d );

         let box3 = new Box3().setFromObject(obj3d);

         geom_size = box3.getSize(new Vector3()).length();

         camera.far = geom_size*5;
         camera.updateProjectionMatrix();
      }

      function onWindowResize() {

         camera.aspect = window.innerWidth / window.innerHeight;
         camera.updateProjectionMatrix();

         renderer.setSize( window.innerWidth, window.innerHeight );
      }

      function animate() {

         requestAnimationFrame( animate );

         render();
         stats.update();

      }

      function render() {

         let timer = Date.now() * 0.0001;

         camera.position.x = Math.cos(timer)*geom_size;
         camera.position.z = Math.sin(timer)*geom_size;
         camera.position.y = geom_size;

         camera.lookAt( scene.position );

         for (let i = 0, l = scene.children.length; i < l; i++) {

            let object = scene.children[ i ];

            object.rotation.x = timer * 5;
            object.rotation.y = timer * 2.5;

         }

         // set rendering order for transparent volumes, create with JSROOT
         produceRenderOrder(scene, camera.position, 'dflt');

         renderer.render( scene, camera );
      }

       container = document.createElement('div');
       document.body.appendChild(container);

       camera = new PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, geom_size*5 );
       camera.position.y = geom_size;

       scene = new Scene();
       scene.add(new AmbientLight(0x404040));

       let light = new DirectionalLight( 0xffffff );
       light.position.set(0, 1, 0);
       scene.add( light );

       // first draw dummy object, seen in the beginning
       let material = new MeshLambertMaterial({side: DoubleSide, color: 'red', vertexColors: false});
       dummy = new Mesh(new TetrahedronGeometry(75, 0), material);
       // object.position.set( 200, 0, 200 );
       scene.add( dummy );

       renderer = new WebGLRenderer({ antialias: true });
       renderer.setPixelRatio( window.devicePixelRatio );
       renderer.setSize( window.innerWidth, window.innerHeight );

       container.appendChild( renderer.domElement );

       stats = new Stats();
       container.appendChild( stats.dom );

       window.addEventListener( 'resize', onWindowResize, false );


       const file = await openFile('https://root.cern/files/lego.root');

       const obj = await file.readObject('geom');

       add_geometry(obj);

       animate();

   </script>

</html>
