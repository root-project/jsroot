<!DOCTYPE html>
<html lang="en">
   <head>
      <!-- as prototype used: https://github.com/mrdoob/three.js/blob/master/examples/webgl_geometries.html -->
      <title>three.js model for TGeo object</title>
      <meta charset="utf-8">
      <link rel="shortcut icon" href="../img/RootIcon.ico"/>
      <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
      <style>
         body {
            font-family: Monospace;
            background-color: #000;
            margin: 0px;
            overflow: hidden;
         }
      </style>
      <script type="importmap">
         { "imports": { "jsroot": "../modules/main.mjs", "jsroot/geom": "../modules/geom/TGeoPainter.mjs", "three": "../modules/three.mjs" } }
      </script>
   </head>

   <body>
   </body>

   <script type='module'>

      import { decodeUrl, httpRequest, openFile } from 'jsroot';

      import { Box3, Vector3, PerspectiveCamera, Scene, AmbientLight, DirectionalLight, DoubleSide,
               MeshLambertMaterial, Mesh, TetrahedronGeometry, WebGLRenderer } from 'three';

      import { build, produceRenderOrder } from 'jsroot/geom';

      import Stats from 'https://threejs.org/examples/jsm/libs/stats.module.js';

      let container, stats,  camera, scene, renderer, geom_size = 400, dummy = null,
         d = decodeUrl();

      function add_geometry(obj) {

         // options for building three.js model
         let opt = { numfaces: 100000, numnodes: 1000 };
         if (d.has('all')) {
            opt.numfaces *= 100;
            opt.numnodes *= 100;
         }

         if (d.has('dflt') || d.has('dflt_colors'))
            opt.dflt_colors = true;

         // enable usage of InstancedMesh
         if (d.has('instancing'))
            opt.instancing = 1;

         // function demonstrate creation of three.js model
         let obj3d = build(obj, opt);

         if (!obj3d)
            return;
         scene.remove( dummy );
         scene.add( obj3d );

         let box3 = new Box3().setFromObject(obj3d);

         geom_size = box3.getSize(new Vector3()).length();

         camera.far = geom_size*5;
         camera.updateProjectionMatrix();
      }

      function onWindowResize() {

         camera.aspect = window.innerWidth / window.innerHeight;
         camera.updateProjectionMatrix();

         renderer.setSize( window.innerWidth, window.innerHeight );
      }

      function animate() {

         requestAnimationFrame( animate );

         render();
         stats.update();

      }

      function render() {

         let timer = Date.now() * 0.0001;

         camera.position.x = Math.cos(timer)*geom_size;
         camera.position.z = Math.sin(timer)*geom_size;
         camera.position.y = geom_size;

         camera.lookAt( scene.position );

         for (let i = 0, l = scene.children.length; i < l; i++) {

            let object = scene.children[ i ];

            object.rotation.x = timer * 5;
            object.rotation.y = timer * 2.5;

         }

         // set rendering order for transparent volumes, create with JSROOT
         produceRenderOrder(scene, camera.position, 'dflt');

         renderer.render( scene, camera );
      }

       container = document.createElement('div');
       document.body.appendChild(container);

       camera = new PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, geom_size*5 );
       camera.position.y = geom_size;

       scene = new Scene();
       scene.add(new AmbientLight(0x404040));

       let light = new DirectionalLight( 0xffffff );
       light.position.set(0, 1, 0);
       scene.add( light );

       // first draw dummy object, seen in the beginning
       let material = new MeshLambertMaterial({side: DoubleSide, color: 'red', vertexColors: false});
       dummy = new Mesh(new TetrahedronGeometry(75, 0), material);
       // object.position.set( 200, 0, 200 );
       scene.add( dummy );

       renderer = new WebGLRenderer({ antialias: true });
       renderer.setPixelRatio( window.devicePixelRatio );
       renderer.setSize( window.innerWidth, window.innerHeight );

       container.appendChild( renderer.domElement );

       stats = new Stats();
       container.appendChild( stats.dom );

       window.addEventListener( 'resize', onWindowResize, false );

       // ------------------- reading geometry object --------------------------

       let filename = d.get("file") || 'https://root.cern/js/files/geom/simple_alice.json.gz';

       // filename = 'https://root.cern/files/tank.root';

       if (filename.indexOf('.root') > 0) {
          // load geometry from ROOT file
          let itemname = d.get("item") || 'geom';
          let file = await openFile(filename);
          let obj = await file.readObject(itemname);
          add_geometry(obj);
       } else {
          // load geometry from JSON as object
          let obj = await httpRequest(filename, 'object');
          add_geometry(obj);
       }

       // ------------------- end of reading geometry object --------------------------

       animate();

   </script>

</html>
